-- test-run result file version 2
test_run = require('test_run').new()
 | ---
 | ...
log = require('log')
 | ---
 | ...
fiber = require('fiber')
 | ---
 | ...

SERVERS = {                 \
    'gh6035master',         \
    'gh6035replica1',       \
    'gh6035replica2',       \
    'gh6035replica3'        \
}
 | ---
 | ...

test_run:create_cluster(SERVERS, "replication")
 | ---
 | ...
test_run:wait_fullmesh(SERVERS)
 | ---
 | ...

--
-- Make sure master node is a RAFT leader.
test_run:switch('gh6035master')
 | ---
 | - true
 | ...
test_run:wait_cond(function() return box.info().election.state == 'leader' end, 10)
 | ---
 | - true
 | ...

-- Create spaces needed.
_ = box.schema.create_space('async')
 | ---
 | ...
_ = box.space.async:create_index('pk')
 | ---
 | ...
_ = box.schema.create_space('sync', {is_sync = true})
 | ---
 | ...
_ = box.space.sync:create_index('pk')
 | ---
 | ...

--
-- Now force make replica3 being a leader.
test_run:switch('gh6035replica3')
 | ---
 | - true
 | ...
box.cfg{read_only = false, election_mode = 'manual'}
 | ---
 | ...
box.ctl.promote()
 | ---
 | ...
test_run:wait_cond(function() return box.info().election.state == 'leader' end, 10)
 | ---
 | - true
 | ...

--
-- Stop replica1 and replica2.
test_run:switch('default')
 | ---
 | - true
 | ...
test_run:cmd('stop server gh6035replica1')
 | ---
 | - true
 | ...
test_run:cmd('stop server gh6035replica2')
 | ---
 | - true
 | ...

--
-- Insert data into async space on replica3 (which is leader now).
test_run:switch('gh6035replica3')
 | ---
 | - true
 | ...
box.space.async:replace{1}
 | ---
 | - [1]
 | ...
-- And wait its replication to complete on the master node
test_run:switch('gh6035master')
 | ---
 | - true
 | ...
test_run:wait_cond(function() return box.space.async:select{}[1] ~= nil \
                   and box.space.async:select{}[1][1] == 1 end, 10)
 | ---
 | - true
 | ...

--
-- And stop this leader (only the master node remains up).
test_run:switch('default')
 | ---
 | - true
 | ...
test_run:cmd('stop server gh6035replica3')
 | ---
 | - true
 | ...
test_run:cmd('delete server gh6035replica3')
 | ---
 | - true
 | ...

--
-- On master node update quorum so we can write
-- to the database again, we're sole node up and
-- running.
test_run:switch('gh6035master')
 | ---
 | - true
 | ...
box.cfg{replication_synchro_quorum = 1}
 | ---
 | ...
box.ctl.wait_rw()
 | ---
 | ...

old_lsn = box.info.lsn
 | ---
 | ...
box.cfg{replication_synchro_quorum = 2}
 | ---
 | ...
require('fiber').create(function() box.space.sync:replace{1} end)
 | ---
 | - status: suspended
 |   name: lua
 |   id: 371
 | ...

--
-- Wait the write to reach WAL, since master node is only
-- once node alive here at this moment, it won't gather quorum
-- for this write and won't issue CONFIRM because only the
-- master node is up and running at this moment.
test_run:wait_cond(function() return box.info.lsn > old_lsn end, 10)
 | ---
 | - true
 | ...

--
-- Stop master, it has unconfirmed (but not rolled back) record.
test_run:switch('default')
 | ---
 | - true
 | ...
test_run:cmd('stop server gh6035master')
 | ---
 | - true
 | ...

--
-- No active nodes at this point. Now restart replica1 and replica2
-- without replica3 in configs and master node stopped.
test_run:switch('default')
 | ---
 | - true
 | ...
test_run:cmd('start server gh6035replica1 with args="true", wait_load=False')
